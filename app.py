import streamlit as st
import qrcode
import json
from cryptography.fernet import Fernet
from hashlib import sha256
import base64
from PIL import Image
from io import BytesIO

# ====== H√†m m√£ h√≥a / gi·∫£i m√£ ======
def generate_key(password: str) -> bytes:
    key = sha256(password.encode()).digest()
    return base64.urlsafe_b64encode(key[:32])

def encrypt_data(data: str, password: str) -> str:
    key = generate_key(password)
    f = Fernet(key)
    return f.encrypt(data.encode()).decode()

def decrypt_data(token: str, password: str) -> str:
    key = generate_key(password)
    f = Fernet(key)
    return f.decrypt(token.encode()).decode()

# ====== Giao di·ªán web ======
st.title("üîê T·∫°o & Gi·∫£i m√£ QR c√≥ m·∫≠t kh·∫©u")

tab1, tab2 = st.tabs(["üì¶ T·∫°o m√£ QR", "üîì Gi·∫£i m√£ QR"])

# ---------- TAB 1: T·∫†O M√É ----------
with tab1:
    st.subheader("Nh·∫≠p th√¥ng tin ƒë·ªÉ t·∫°o m√£ QR")

    password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u b·∫£o v·ªá", type="password")
    num_fields = st.number_input("S·ªë l∆∞·ª£ng tr∆∞·ªùng th√¥ng tin", 1, 10, 1)

    fields = {}
    for i in range(num_fields):
        key = st.text_input(f"T√™n tr∆∞·ªùng {i+1}")
        val = st.text_input(f"Gi√° tr·ªã {i+1}")
        if key:
            fields[key] = val

    if st.button("T·∫°o m√£ QR"):
        if not password:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!")
        elif not fields:
            st.warning("‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 1 tr∆∞·ªùng th√¥ng tin!")
        else:
            data_json = json.dumps(fields, ensure_ascii=False)
            encrypted = encrypt_data(data_json, password)
            qr = qrcode.make(encrypted)
            buf = BytesIO()
            qr.save(buf, format="PNG")
            st.image(buf.getvalue(), caption="M√£ QR ƒë∆∞·ª£c t·∫°o")
            st.download_button("T·∫£i m√£ QR", buf.getvalue(), "ma_hoa_qr.png")

# ---------- TAB 2: GI·∫¢I M√É ----------
with tab2:
    st.subheader("T·∫£i l√™n ·∫£nh QR ƒë·ªÉ gi·∫£i m√£")

    uploaded = st.file_uploader("Ch·ªçn ·∫£nh QR", type=["png", "jpg", "jpeg"])
    password_dec = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u", type="password")

    if st.button("Gi·∫£i m√£"):
        if not uploaded:
            st.warning("‚ö†Ô∏è Ch∆∞a ch·ªçn ·∫£nh QR.")
        elif not password_dec:
            st.warning("‚ö†Ô∏è Ch∆∞a nh·∫≠p m·∫≠t kh·∫©u.")
        else:
            try:
                img = Image.open(uploaded)
                import cv2, numpy as np
                from pyzbar.pyzbar import decode

                img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
                qr_codes = decode(img_cv)
                if not qr_codes:
                    st.error("‚ùå Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c m√£ QR.")
                else:
                    encrypted_data = qr_codes[0].data.decode()
                    decrypted = decrypt_data(encrypted_data, password_dec)
                    st.success("‚úÖ Gi·∫£i m√£ th√†nh c√¥ng!")
                    data = json.loads(decrypted)
                    st.json(data)
            except Exception as e:
                st.error("‚ùå M·∫≠t kh·∫©u sai ho·∫∑c m√£ QR kh√¥ng h·ª£p l·ªá.")
